@charset "UTF-8";

:root {
  --hilite-color: rgba(255, 255, 128, .5);
}

body {
  font-family: sans-serif;
  margin: 0;
  padding: 0;
}

.prop {
  font-weight: bold;
}

.null {
  color: #A52A2A;
}

.bool {
  color: blue;
}

.num {
  color: blue;
}

.string {
  color: green;
  white-space: pre-wrap;
}

.spacer {
  display: inline-block;
  width: 0px;
  white-space: pre-wrap;
}

.q {
  display: inline-block;
  width: 0px;
  color: transparent;
}

.quoted .q {
  display: inline;
  width: auto;
  color: inherit;
  font-weight: normal;
}

li {
  position: relative;
}

.collapser {
  position: absolute;
  left: -3ch;
  top: 0;
  cursor: pointer;
  transform: rotate(90deg);
  transition: all .2s;

  width: 1lh;
  height: 3ch;
  align-content: unsafe center;
  text-align: center;
  transform-origin: calc(3ch / 2);
}

.collapser:before {
  content: "â–¸";
  user-select: none;
}

.collapsed > .collapser {
  transform: rotate(0deg);
  width: 3ch;
  height: 1lh;
}

.collapsed {
  display: flex;
  align-items: baseline;
  /* Keep spaces around inline text, that is
   * prevent anonymous flex items to shrink. */
  white-space: pre;

  > * {
    flex-shrink: 0;
  }
  * {
    /* Nowrap to enable text-overflow, and ultimately
     * preformatted to preserve whitespace in values. */
    white-space: pre;
  }
  .spacer {
    white-space: nowrap; /* Collapse whitespace. */
  }
  :not(.q, .collapser) {
    display: inline;
  }
  /* XXX: Prevent "invisible" text-overflow
   * at the end of a collapsed object. */
  :last-child > :not(.quoted):last-child > .q:last-child {
    direction: rtl;
  }
}

.collapsed > .collapsible {
  height: 1.2em;
  height: 1lh;
  flex-shrink: 1;
  overflow: hidden;
  min-width: 1ch; /* Don't clip the last ellipsis, and ensure the content is
                   * available for copy-paste ! width: 0; overflow: hidden. */
  text-overflow: ellipsis;
  margin: 0 1ch;

  .collapsible {
    margin: 0;
  }
  .collapser {
    display: none;
  }
  li {
    position: static;
  }
}

#error {
  border-bottom: 1px solid rgb(212, 209, 209);
  background-color: rgb(239, 239, 239);
  margin-bottom: 1.5em;
  padding: 1em .5em;
}

.errormessage {
  font-family: monospace;
  margin-top: .5em;
  color: rgb(167, 5, 5);
}

.errorcolumn {
  background-color: rgb(167, 5, 5);
  color: white;
}

.errorline {
    background-color: rgb(255, 226, 226);
}

#json {
  font-family: monospace;
  font-size: 1.1em;
  white-space: pre-wrap;
  margin: .5em;
}

ul {
  list-style: none;
  margin: 0 0 0 3ch;
  padding: 0;
}

h1 {
  font-size: 1.2em;
}

/* Indent JSON when there's a callback. */
.callback + #json {
  padding-left: 1em;
}

.callback {
  font-family: monospace;
  color: #A52A2A;
}

/* Tomorrow Night theme */
@media (prefers-color-scheme: dark) {
  :root {
    --hilite-color: rgba(128, 255, 255, .1);
  }

  body {
    background-color: #27292C;
    color: #D7DAD8;
  }

  a {
    color: #4c9edd;
  }
  a:visited {
    color: #b678c7;
  }

  .bool {
    color: #92B2CA;
  }

  .num {
    color: #92B2CA;
  }

  .null {
    color: #D77C78;
  }

  .callback {
    color: #D77C78;
  }

  .string {
    color: #C2C77B;
  }

  #error {
    border-bottom: 1px solid rgb(61, 61, 61);
    background-color: rgb(37, 37, 37);
    margin-bottom: 1.5em;
    padding: 1em .5em;
  }

  .errormessage {
    font-family: monospace;
    margin-top: .5em;
    color: rgb(212, 10, 10);
  }

  .errorcolumn {
    background-color: rgb(212, 10, 10);
    color: white;
  }

  .errorline {
      background-color: rgb(32, 29, 29);
  }
}

.string, :any-link {
  word-break: break-all;
}

:is(.spacer, :not(.quoted) > .q)::selection {
  background-color: transparent;
}

.prop:has(+ .collapser) {
  cursor: pointer;
}
.collapsed {
  &, > * .prop:has(+ .collapser) {
    cursor: default;
  }
}

li:hover {
  &:has(> .collapsible):not(:has(li:hover))::first-line {
    background-color: var(--hilite-color);
  }
  &.collapsed > ul {
    /* Color the background of a single line a la ::first-line. */
    line-height: normal;
  }

  &.collapsed > ul:not(:has(:any-link:hover)) {
    background-color: var(--hilite-color);
  }
  &.collapsed > ul:not(.increase[specificity]) ul {
    background-color: transparent;
  }
}
